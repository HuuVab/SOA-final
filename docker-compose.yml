version: '3.8'

services:
  # User  Service
  customer-service:
    build: ./customer-service
    container_name: ecommerce-customer-service
    restart: always
    ports:
      - "5000:5000"
    environment:
      - DB_SERVICE_URL=http://database-service:5003/api
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - JWT_EXPIRATION=86400
      - FLASK_DEBUG=false
      - PORT=5000
      - EMAIL_SERVICE_URL=http://email-service:5002
      - EMAIL_SERVICE_API_KEY=${EMAIL_SERVICE_API_KEY:-email_service_api_key}
      - AUTH_SERVICE_BASE_URL=${AUTH_SERVICE_BASE_URL:-http://localhost:5000}
      - DB_NAME=/data/customer.sqlite
    volumes:
      - ./customer-service:/app
    networks:
      - ecommerce-network
    command: flask run --host=0.0.0.0 --port=5000
    depends_on:
      - database-service

  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: ecommerce-email-service
    environment:
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-True}
      - EMAIL_SERVICE_API_KEY=${EMAIL_SERVICE_API_KEY:-email_service_api_key}
      - SECRET_KEY=${EMAIL_SERVICE_SECRET_KEY:-email_service_secret}
      - PORT=5002
      - DB_SERVICE_URL=http://database-service:5003/api
      - DB_NAME=/data/email.sqlite
    ports:
      - "5002:5002"
    volumes:
      - ./email-service:/app
      - ./data:/data
    depends_on:
      - database-service
    networks:
      - ecommerce-network
    restart: unless-stopped
    command: flask run --host=0.0.0.0 --port=5002

  # Database Management Service
  database-service:
    build: ./database-service
    container_name: ecommerce-database-service
    ports:
      - "5003:5003"
    environment:
      - DB_NAME=/data/customer.sqlite
      - PORT=5003
    volumes:
      - ./data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped
  
  storage-service:
    build: ./storage-service
    container_name: ecommerce-storage-service
    restart: always
    ports:
      - "5005:5005"
    environment:
      - PORT=5005
      - DB_SERVICE_URL=http://database-service:5003/api
      - DB_NAME=/data/storage.sqlite
      - FLASK_DEBUG=false
    volumes:
      - ./storage-service:/app
      - ./data/storage:/data/storage
    networks:
      - ecommerce-network
    depends_on:
      - database-service

  # Promotion Service
  promotion-service:
    build: ./promotion-service
    container_name: ecommerce-promotion-service
    restart: always
    ports:
      - "5006:5006"
    environment:
      - PORT=5006
      - DB_SERVICE_URL=http://database-service:5003/api
      - STORAGE_SERVICE_URL=http://storage-service:5005
      - DB_NAME=/data/promotion.sqlite
      - STORAGE_DB_NAME=/data/storage.sqlite
      - FLASK_DEBUG=false
    volumes:
      - ./promotion-service:/app
    networks:
      - ecommerce-network
    depends_on:
      - database-service
      - storage-service

  # Media Service
  media-service:
    build: ./media-service
    container_name: ecommerce-media-service
    restart: always
    ports:
      - "5007:5007"
    environment:
      - PORT=5007
      - DB_SERVICE_URL=http://database-service:5003/api
      - DB_NAME=/data/media.sqlite
      - MEDIA_DB_NAME=/data/media.sqlite
      - FLASK_DEBUG=false
    volumes:
      - ./media-service:/app
      - ./data/media:/data/media
    networks:
      - ecommerce-network
    depends_on:
      - database-service

  # Cart Service
  cart-service:
    build: ./cart-service
    container_name: ecommerce-cart-service
    restart: always
    ports:
      - "5008:5008"  # Using port 5008 to avoid conflict with media-service
    environment:
      - PORT=5008
      - DB_SERVICE_URL=http://database-service:5003/api
      - CUSTOMER_SERVICE_URL=http://customer-service:5000/api
      - PRODUCT_SERVICE_URL=http://storage-service:5005/api
      - PROMOTION_SERVICE_URL=http://promotion-service:5006/api
      - DB_NAME=/data/cart.sqlite  # Add this explicit database name
      - FLASK_DEBUG=false
    volumes:
      - ./cart-service:/app
      - ./data:/data  # Add this volume mapping to access the shared data directory
    networks:
      - ecommerce-network
    depends_on:
      - database-service
      - customer-service
      - storage-service
      - promotion-service

  payment-service:
    build: ./payment-service
    container_name: ecommerce-payment-service
    restart: always
    ports:
      - "5009:5009"
    environment:
      - PORT=5009
      - DB_SERVICE_URL=http://database-service:5003/api
      - CUSTOMER_SERVICE_URL=http://customer-service:5000/api
      - CART_SERVICE_URL=http://cart-service:5008/api
      - ORDER_SERVICE_URL=http://order-service:5010/api
      - DB_NAME=/data/payment.sqlite 
      - FLASK_DEBUG=false
    volumes:
      - ./payment-service:/app
      - ./data:/data
    networks:
      - ecommerce-network
    depends_on:
      - database-service
      - customer-service
      - cart-service

  order-service:
    build: ./order-service
    container_name: ecommerce-order-service
    restart: always
    ports:
      - "5010:5010"
    environment:
      - PORT=5010
      - DB_SERVICE_URL=http://database-service:5003/api
      - CUSTOMER_SERVICE_URL=http://customer-service:5000/api
      - PAYMENT_SERVICE_URL=http://payment-service:5009/api
      - PRODUCT_SERVICE_URL=http://storage-service:5005/api
      - EMAIL_SERVICE_URL=http://email-service:5002/api
      - EMAIL_SERVICE_API_KEY=${EMAIL_SERVICE_API_KEY:-email_service_api_key}
      - ADMIN_TOKEN=${ADMIN_TOKEN:-admin-secret-token}
      - FLASK_DEBUG=false
    volumes:
      - ./order-service:/app
      - ./data:/data
    networks:
      - ecommerce-network
    depends_on:
      - database-service
      - customer-service
      - email-service



  frontend-service:
    build: ./frontend-service
    ports:
      - "5012:5012"
    environment:
      - STORAGE_SERVICE_URL=http://storage-service:5005/api
      - PROMOTION_SERVICE_URL=http://promotion-service:5006/api
      - FLASK_DEBUG=true
    depends_on:
      - storage-service
      - promotion-service
    networks:
      - ecommerce-network
  ngrok:
      image: ngrok/ngrok:latest
      container_name: ecommerce-ngrok
      ports:
        - "4040:4040"  # The ngrok web interface
      environment:
        - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:-your_auth_token}
      command: http frontend-service:5012
      networks:
        - ecommerce-network
      depends_on:
        - frontend-service

networks:
  ecommerce-network:
    driver: bridge
