# AWS ECS Task Definition for User Authentication Service
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for User Authentication microservice'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  ContainerPort:
    Type: Number
    Default: 5000
    Description: Port that the container listens on
  
  VpcId:
    Type: String
    Description: VPC ID for ECS cluster

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for ECS cluster
  
  MongoDbUri:
    Type: String
    NoEcho: true
    Description: MongoDB connection URI

  SecretKey:
    Type: String
    NoEcho: true
    Description: Secret key for JWT token generation

Resources:
  # ECR Repository for the Docker image
  UserServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'ecommerce-user-service-${Environment}'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'ecommerce-cluster-${Environment}'
  
  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  # Secret for environment variables
  UserServiceSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'ecommerce-user-service-${Environment}'
      Description: 'Secrets for the user service'
      SecretString: !Sub '{"MONGO_URI":"${MongoDbUri}","SECRET_KEY":"${SecretKey}"}'
  
  # Task Definition
  UserServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'ecommerce-user-service-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: user-service
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${UserServiceRepository}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref UserServiceLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: MONGO_URI
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UserServiceSecrets}:MONGO_URI::'
            - Name: SECRET_KEY
              ValueFrom: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UserServiceSecrets}:SECRET_KEY::'
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: ENVIRONMENT
              Value: !Ref Environment
  
  # CloudWatch Log Group
  UserServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/ecommerce-user-service-${Environment}'
      RetentionInDays: 30
  
  # Security Group for the Task
  UserServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for user service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
  
  # Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  
  # Application Load Balancer
  UserServiceALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'user-service-alb-${Environment}'
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  
  # Target Group
  UserServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'user-service-tg-${Environment}'
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
  
  # Listener
  UserServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref UserServiceALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UserServiceTargetGroup
  
  # ECS Service
  UserService:
    Type: AWS::ECS::Service
    DependsOn: UserServiceListener
    Properties:
      ServiceName: !Sub 'ecommerce-user-service-${Environment}'
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      TaskDefinition: !Ref UserServiceTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref UserServiceSecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: user-service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref UserServiceTargetGroup

Outputs:
  UserServiceUrl:
    Description: URL of the user service
    Value: !Sub 'http://${UserServiceALB.DNSName}'
  
  EcsCluster:
    Description: ECS Cluster Name
    Value: !Ref EcsCluster
  
  EcrRepository:
    Description: ECR Repository URL
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${UserServiceRepository}'
